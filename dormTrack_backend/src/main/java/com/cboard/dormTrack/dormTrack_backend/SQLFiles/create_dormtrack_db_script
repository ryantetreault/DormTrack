DROP DATABASE IF EXISTS DormTrack_db;
CREATE DATABASE DormTrack_db;
USE DormTrack_db;


CREATE TABLE student
(
	student_id INT PRIMARY KEY AUTO_INCREMENT,
	name VARCHAR(100) NOT NULL,
	gender ENUM('M', 'F') NOT NULL,
	year INT NOT NULL,
	email VARCHAR(100) NOT NULL
) AUTO_INCREMENT = 1;


CREATE TABLE dorm
(
	dorm_id INT PRIMARY KEY AUTO_INCREMENT,
	name VARCHAR(100) NOT NULL,
	location VARCHAR(100) NOT NULL,
	total_floors INT NOT NULL
) AUTO_INCREMENT = 1;


CREATE TABLE room
(
	room_id INT PRIMARY KEY AUTO_INCREMENT,
	dorm_id INT,
	floor INT NOT NULL,
	capacity INT NOT NULL,
	current_occupancy INT NOT NULL,

	CONSTRAINT fk_room_dorm FOREIGN KEY (dorm_id) REFERENCES dorm(dorm_id)
		ON DELETE CASCADE
		ON UPDATE CASCADE
) AUTO_INCREMENT = 1;


CREATE TABLE room_assignment
(
	assignment_id INT PRIMARY KEY AUTO_INCREMENT,
	student_id INT NOT NULL,
	room_id INT NOT NULL,
	date_assigned DATE NOT NULL,
	date_vacated DATE,
	assigned_ra_id INT,

	CONSTRAINT fk_ra_student FOREIGN KEY (student_id) REFERENCES student(student_id)
		ON DELETE CASCADE
		ON UPDATE CASCADE,

	CONSTRAINT fk_ra_room FOREIGN KEY (room_id) REFERENCES room(room_id)
		ON DELETE CASCADE
		ON UPDATE CASCADE
) AUTO_INCREMENT = 1;


CREATE TABLE maintenance_request
(
	request_id INT PRIMARY KEY AUTO_INCREMENT,
	student_id INT NOT NULL,
	room_id INT NOT NULL,
	issue_description TEXT NOT NULL,
	date_submitted DATE NOT NULL,
	status ENUM('Open', 'Resolved') NOT NULL,

	CONSTRAINT fk_mr_student FOREIGN KEY (student_id) REFERENCES student(student_id)
		ON DELETE CASCADE
		ON UPDATE CASCADE,

	CONSTRAINT fk_mr_room FOREIGN KEY (room_id) REFERENCES room(room_id)
		ON DELETE CASCADE
		ON UPDATE CASCADE
) AUTO_INCREMENT = 1;


CREATE TABLE ra
(
	ra_id INT PRIMARY KEY AUTO_INCREMENT,
	name VARCHAR(100) NOT NULL,
	phone VARCHAR(20) NOT NULL,
	assigned_dorm INT,

	CONSTRAINT fk_ra_dorm FOREIGN KEY (assigned_dorm) REFERENCES dorm(dorm_id)
		ON DELETE SET NULL
		ON UPDATE CASCADE
) AUTO_INCREMENT = 1;


CREATE TABLE room_inspection
(
	inspection_id INT PRIMARY KEY AUTO_INCREMENT,
	ra_name VARCHAR(50) NOT NULL,
	room_id INT NOT NULL,
	inspection_date DATE NOT NULL,
	notes TEXT,
	result ENUM('Pass', 'Fail') NOT NULL,

	CONSTRAINT fk_inspection_room FOREIGN KEY (room_id) REFERENCES room(room_id)
		ON DELETE CASCADE
        ON UPDATE CASCADE
);



CREATE TABLE dorm_event
(
	event_id INT PRIMARY KEY AUTO_INCREMENT,
	dorm_id INT NOT NULL,
	title VARCHAR(100) NOT NULL,
	description TEXT NOT NULL,
	date DATE NOT NULL,

	CONSTRAINT fk_event_dorm FOREIGN KEY (dorm_id) REFERENCES dorm(dorm_id)
		ON DELETE CASCADE
		ON UPDATE CASCADE
) AUTO_INCREMENT = 1;


CREATE TABLE room_change_history
(
	change_id INT PRIMARY KEY AUTO_INCREMENT,
	student_id INT NOT NULL,
	old_room_id INT,
	new_room_id INT,
	change_date DATE NOT NULL,

	CONSTRAINT fk_change_student FOREIGN KEY (student_id) REFERENCES student(student_id)
		ON DELETE CASCADE
		ON UPDATE CASCADE,

	CONSTRAINT fk_old_room FOREIGN KEY (old_room_id) REFERENCES room(room_id)
		ON DELETE SET NULL
		ON UPDATE CASCADE,

	CONSTRAINT fk_new_room FOREIGN KEY (new_room_id) REFERENCES room(room_id)
		ON DELETE SET NULL
		ON UPDATE CASCADE
) AUTO_INCREMENT = 1;


CREATE TABLE maintenance_request_log
(
	log_id INT PRIMARY KEY AUTO_INCREMENT,
	request_id INT,
	resolved_by VARCHAR(100),
	resolution_date DATE,

	CONSTRAINT fk_log_request FOREIGN KEY (request_id) REFERENCES maintenance_request(request_id)
		ON DELETE CASCADE
		ON UPDATE CASCADE
);


CREATE TABLE StudentRA
(
    student_id INT PRIMARY KEY,
	ra_id INT,
    FOREIGN KEY (student_id) REFERENCES Student(student_id),
    FOREIGN KEY (ra_id) REFERENCES RA(ra_id)
);


-- VIEWS
-- current students in each dorm/floor with RA names
CREATE OR REPLACE VIEW current_students_by_floor AS
SELECT
	s.name AS student_name,
	r.floor,
    d.name AS dorm_name,
    ra.name AS ra_name
FROM student s
JOIN room_assignment ra_assign ON s.student_id = ra_assign.student_id
JOIN room r ON ra_assign.room_id = r.room_id
JOIN dorm d ON r.dorm_id = d.dorm_id
JOIN studentra sra ON s.student_id = sra.student_id
JOIN ra ON sra.ra_id = ra.ra_id
WHERE ra_assign.date_vacated IS NULL
ORDER BY r.floor, d.name, s.name;

-- unresolved maintenance requests sorted by urgency
CREATE VIEW open_maintenance_requests AS
SELECT
    mr.request_id,
    s.name AS student_name,
    mr.issue_description,
	mr.status,
    mr.date_submitted
FROM maintenance_request mr
JOIN student s ON mr.student_id = s.student_id
WHERE mr.status <> 'Resolved'
ORDER BY
    FIELD(mr.status, 'Urgent', 'Open'),
    mr.date_submitted;


-- resolved maintenance requests
CREATE VIEW resolved_maintenance_requests AS
SELECT
    mr.request_id,
	s.name AS student_name,
    mr.issue_description,
    l.resolved_by,
    l.resolution_date
FROM maintenance_request mr
JOIN student s ON mr.student_id = s.student_id
JOIN maintenance_request_log l ON mr.request_id = l.request_id
ORDER BY l.resolution_date DESC;


-- display room change history
CREATE OR REPLACE VIEW room_change_history_view AS
SELECT
	s.name AS studentName,
    CONCAT('Room ', old.room_id, ' (Floor ', old.floor, ')') AS oldRoomLabel,
    CONCAT('Room ', newr.room_id, ' (Floor ', newr.floor, ')') AS newRoomLabel,
    rch.change_date AS changeDate
FROM room_change_history rch
JOIN student s ON rch.student_id = s.student_id
LEFT JOIN room old ON rch.old_room_id = old.room_id
LEFT JOIN room newr ON rch.new_room_id = newr.room_id
ORDER BY rch.change_date DESC;


-- room inspection summary view
CREATE OR REPLACE VIEW room_inspection_view AS
SELECT
	i.inspection_id AS inspectionId,
    i.ra_name AS raName,
    CONCAT('Room ', r.room_id, ' - ', d.name, ', Floor ', r.floor) AS roomLabel,
    i.inspection_date AS inspectionDate,
    i.result AS result,
    i.notes AS notes
FROM room_inspection i
JOIN room r ON i.room_id = r.room_id
JOIN dorm d ON r.dorm_id = d.dorm_id
ORDER BY i.inspection_date DESC;



-- PROCEDURES
-- assign student to a room, with random ra from that hall
DELIMITER $$
CREATE PROCEDURE AssignStudentToRoom
(
    IN p_student_id INT,
    IN p_room_id INT
)
BEGIN
	DECLARE v_dorm_id INT;
    DECLARE v_ra_id INT;

    SELECT dorm_id INTO v_dorm_id FROM room WHERE room_id = p_room_id;

    SELECT ra_id INTO v_ra_id
    FROM ra
    WHERE assigned_dorm = v_dorm_id
    ORDER BY RAND()
    LIMIT 1;

    INSERT INTO room_assignment (student_id, room_id, date_assigned)
    VALUES (p_student_id, p_room_id, CURDATE());

    UPDATE room
    SET current_occupancy = current_occupancy + 1
    WHERE room_id = p_room_id;

    INSERT INTO StudentRA (student_id, ra_id) VALUES (p_student_id, v_ra_id);

    SELECT v_ra_id AS assigned_ra;
END$$
DELIMITER ;


-- close maintenance request and log who resolved it
DELIMITER $$
CREATE PROCEDURE close_maintenance_request(IN req_id INT, IN resolver_name VARCHAR(100))
BEGIN
  UPDATE maintenance_request
  SET status = 'Resolved'
  WHERE request_id = req_id;

  INSERT INTO maintenance_request_log (request_id, resolved_by, resolution_date)
  VALUES (req_id, resolver_name, CURDATE());
END$$
DELIMITER ;



-- change a students room
DELIMITER $$
CREATE PROCEDURE ChangeStudentRoom
(
    IN p_student_id INT,
    IN p_new_room_id INT
)
BEGIN
	DECLARE v_old_room_id INT;
    DECLARE v_assignment_id INT;

    SELECT assignment_id, room_id INTO v_assignment_id, v_old_room_id
    FROM room_assignment
    WHERE student_id = p_student_id AND date_vacated IS NULL
    LIMIT 1;

    UPDATE room_assignment
    SET date_vacated = CURDATE()
    WHERE assignment_id = v_assignment_id;

	UPDATE room
    SET current_occupancy = current_occupancy - 1
    WHERE room_id = v_old_room_id;

    INSERT INTO room_assignment (student_id, room_id, date_assigned)
    VALUES (p_student_id, p_new_room_id, CURDATE());

    UPDATE room
    SET current_occupancy = current_occupancy + 1
    WHERE room_id = p_new_room_id;

    -- room change history will be logged via trigger
END$$
DELIMITER ;


-- move student out
DELIMITER $$
CREATE PROCEDURE MoveStudentOut(IN p_student_id INT)
BEGIN
    DECLARE v_room_id INT;
    DECLARE v_assignment_id INT;

    SELECT assignment_id, room_id INTO v_assignment_id, v_room_id
    FROM room_assignment
    WHERE student_id = p_student_id AND date_vacated IS NULL
	LIMIT 1;

	UPDATE room_assignment
    SET date_vacated = CURDATE()
    WHERE assignment_id = v_assignment_id;

    UPDATE room
    SET current_occupancy = current_occupancy - 1
    WHERE room_id = v_room_id;
END$$
DELIMITER ;


-- TRIGGERS
-- room change history
DELIMITER $$
CREATE TRIGGER log_room_insert
AFTER INSERT ON room_assignment
FOR EACH ROW
BEGIN
	DECLARE v_last_room_id INT;

	SELECT room_id INTO v_last_room_id
	FROM room_assignment
		WHERE student_id = NEW.student_id AND date_vacated IS NOT NULL
		ORDER BY date_vacated DESC
		LIMIT 1;

	IF v_last_room_id IS NOT NULL THEN
		INSERT INTO room_change_history (student_id, old_room_id, new_room_id, change_date)
		VALUES (NEW.student_id, v_last_room_id, NEW.room_id, CURDATE());
	END IF;
END$$
DELIMITER ;


-- blocks multiple room assignemnts to same student
DELIMITER $$
CREATE TRIGGER prevent_multiple_assignments
BEFORE INSERT ON room_assignment
FOR EACH ROW
BEGIN
    DECLARE existing_count INT;

    SELECT COUNT(*) INTO existing_count
    FROM room_assignment
    WHERE student_id = NEW.student_id AND date_vacated IS NULL;

	IF existing_count > 0 THEN
		SIGNAL SQLSTATE '45000'
		SET MESSAGE_TEXT = 'Student already assigned to a room.';
    END IF;
END$$
DELIMITER ;



--
-- -----------------------------------------------------------------------------------------------------------------------------
-- TEST INSERTS


-- STUDENTS
INSERT INTO student (student_id, name, gender, year, email) VALUES (1, 'Alice Johnson', 'F', 2, 'alice.johnson@westfield.ma.edu');
INSERT INTO student (student_id, name, gender, year, email) VALUES (2, 'Bob Smith', 'M', 1, 'bob.smith@westfield.ma.edu');
INSERT INTO student (student_id, name, gender, year, email) VALUES (3, 'Charlie Nguyen', 'M', 3, 'charlie.nguyen@westfield.ma.edu');
INSERT INTO student (student_id, name, gender, year, email) VALUES (4, 'Dana Lopez', 'F', 4, 'dana.lopez@westfield.ma.edu');

INSERT INTO student (student_id, name, gender, year, email) VALUES
(5, 'Ethan Brooks', 'M', 2, 'ethan.brooks@westfield.ma.edu'),
(6, 'Grace Lin', 'F', 3, 'grace.lin@westfield.ma.edu'),
(7, 'Henry Adams', 'M', 1, 'henry.adams@westfield.ma.edu'),
(8, 'Isla Rivera', 'F', 4, 'isla.rivera@westfield.ma.edu'),
(9, 'Jack Chen', 'M', 2, 'jack.chen@westfield.ma.edu');


-- DORMS
INSERT INTO dorm (dorm_id, name, location, total_floors) VALUES (1, 'Hawthorne Hall', 'North Campus', 5);
INSERT INTO dorm (dorm_id, name, location, total_floors) VALUES (2, 'Maple Hall', 'South Campus', 4);
INSERT INTO dorm (dorm_id, name, location, total_floors) VALUES (3, 'Oak Hall', 'East Campus', 6);
INSERT INTO dorm (dorm_id, name, location, total_floors) VALUES (4, 'Birch Hall', 'West Campus', 3);
INSERT INTO dorm (dorm_id, name, location, total_floors) VALUES (5, 'Cedar Hall', 'Central Campus', 4);

-- ------------------------------------------------------------------------------------------------------------------

-- ROOMS
INSERT INTO room (room_id, dorm_id, floor, capacity, current_occupancy) VALUES (1, 1, 1, 2, 1);
INSERT INTO room (room_id, dorm_id, floor, capacity, current_occupancy) VALUES (2, 1, 2, 2, 2);
INSERT INTO room (room_id, dorm_id, floor, capacity, current_occupancy) VALUES (3, 2, 1, 2, 1);
INSERT INTO room (room_id, dorm_id, floor, capacity, current_occupancy) VALUES (4, 2, 2, 1, 0);

-- Hawthorne Hall (Dorm 1)
INSERT INTO room (room_id, dorm_id, floor, capacity, current_occupancy) VALUES (5, 1, 3, 2, 0);
INSERT INTO room (room_id, dorm_id, floor, capacity, current_occupancy) VALUES (6, 1, 4, 1, 0);

-- Maple Hall (Dorm 2)
INSERT INTO room (room_id, dorm_id, floor, capacity, current_occupancy) VALUES (7, 2, 3, 2, 1);
INSERT INTO room (room_id, dorm_id, floor, capacity, current_occupancy) VALUES (8, 2, 4, 1, 0);

-- Oak Hall (Dorm 3)
INSERT INTO room (room_id, dorm_id, floor, capacity, current_occupancy) VALUES (9, 3, 1, 2, 2);
INSERT INTO room (room_id, dorm_id, floor, capacity, current_occupancy) VALUES (10, 3, 2, 1, 0);
INSERT INTO room (room_id, dorm_id, floor, capacity, current_occupancy) VALUES (11, 3, 5, 2, 1);
INSERT INTO room (room_id, dorm_id, floor, capacity, current_occupancy) VALUES (12, 3, 6, 1, 0);

-- Birch Hall (Dorm 4)
INSERT INTO room (room_id, dorm_id, floor, capacity, current_occupancy) VALUES (13, 4, 1, 2, 0);
INSERT INTO room (room_id, dorm_id, floor, capacity, current_occupancy) VALUES (14, 4, 2, 1, 1);
INSERT INTO room (room_id, dorm_id, floor, capacity, current_occupancy) VALUES (15, 4, 3, 2, 0);

-- Cedar Hall (Dorm 5)
INSERT INTO room (room_id, dorm_id, floor, capacity, current_occupancy) VALUES (16, 5, 1, 2, 2);
INSERT INTO room (room_id, dorm_id, floor, capacity, current_occupancy) VALUES (17, 5, 2, 2, 1);
INSERT INTO room (room_id, dorm_id, floor, capacity, current_occupancy) VALUES (18, 5, 4, 1, 0);

-- Additional rooms for Hawthorne Hall (Dorm 1)
INSERT INTO room (dorm_id, floor, capacity, current_occupancy) VALUES
(1, 5, 2, 0),
(1, 5, 1, 0),
(1, 4, 1, 1),
(1, 3, 2, 0),
(1, 2, 1, 1),
(1, 1, 2, 1);

-- Additional rooms for Maple Hall (Dorm 2)
INSERT INTO room (dorm_id, floor, capacity, current_occupancy) VALUES
(2, 4, 1, 0),
(2, 3, 2, 1),
(2, 2, 2, 0),
(2, 2, 1, 1),
(2, 1, 1, 0),
(2, 1, 2, 0);

-- Additional rooms for Oak Hall (Dorm 3)
INSERT INTO room (dorm_id, floor, capacity, current_occupancy) VALUES
(3, 6, 2, 0),
(3, 6, 1, 1),
(3, 5, 1, 1),
(3, 4, 2, 0),
(3, 3, 1, 0),
(3, 2, 2, 2);

-- Additional rooms for Birch Hall (Dorm 4)
INSERT INTO room (dorm_id, floor, capacity, current_occupancy) VALUES
(4, 3, 2, 0),
(4, 3, 1, 1),
(4, 2, 2, 1),
(4, 2, 1, 0),
(4, 1, 2, 1),
(4, 1, 1, 1);

-- Additional rooms for Cedar Hall (Dorm 5)
INSERT INTO room (dorm_id, floor, capacity, current_occupancy) VALUES
(5, 4, 1, 0),
(5, 4, 2, 0),
(5, 3, 2, 2),
(5, 2, 1, 1),
(5, 1, 1, 0),
(5, 1, 2, 1);

-- ------------------------------------------------------------------------------------------------------------------

-- ROOM ASSIGNMENTS
INSERT INTO room_assignment (assignment_id, student_id, room_id, date_assigned, date_vacated) VALUES (1, 1, 1, '2025-01-15', NULL);
INSERT INTO room_assignment (assignment_id, student_id, room_id, date_assigned, date_vacated) VALUES (2, 2, 3, '2025-02-01', NULL);
INSERT INTO room_assignment (assignment_id, student_id, room_id, date_assigned, date_vacated) VALUES (3, 3, 4, '2025-01-10', NULL);


-- MAINTENANCE REQUESTS
INSERT INTO maintenance_request (request_id, student_id, room_id, issue_description, date_submitted, status) VALUES (1, 1, 1, 'Leaky faucet', '2025-04-10', 'Open');
INSERT INTO maintenance_request (request_id, student_id, room_id, issue_description, date_submitted, status) VALUES (2, 2, 2, 'Heater not working', '2025-04-12', 'Resolved');
INSERT INTO maintenance_request (request_id, student_id, room_id, issue_description, date_submitted, status) VALUES (3, 3, 3, 'Broken window', '2025-04-15', 'Open');

-- RAs
INSERT INTO ra (ra_id, name, phone, assigned_dorm) VALUES (1, 'Emily Carter', '555-1234', 1);
INSERT INTO ra (ra_id, name, phone, assigned_dorm) VALUES (2, 'James Lee', '555-5678', 2);
INSERT INTO ra (ra_id, name, phone, assigned_dorm) VALUES (3, 'Sophia Martinez', '555-9012', 3);
INSERT INTO ra (ra_id, name, phone, assigned_dorm) VALUES (4, 'Liam Johnson', '555-3456', 3);
INSERT INTO ra (ra_id, name, phone, assigned_dorm) VALUES (5, 'Olivia Nguyen', '555-7890', 4);
INSERT INTO ra (ra_id, name, phone, assigned_dorm) VALUES (6, 'Noah Davis', '555-2345', 4);
INSERT INTO ra (ra_id, name, phone, assigned_dorm) VALUES (7, 'Emma Patel', '555-6789', 5);
INSERT INTO ra (ra_id, name, phone, assigned_dorm) VALUES (8, 'William Kim', '555-4321', 5);

INSERT INTO StudentRA (student_id, ra_id) VALUES (1, 1);
INSERT INTO StudentRA (student_id, ra_id) VALUES (2, 2);
INSERT INTO StudentRA (student_id, ra_id) VALUES (3, 2);

-- ROOM INSPECTIONS
INSERT INTO room_inspection (inspection_id, ra_name, room_id, inspection_date, notes, result) VALUES
(1, 'James Lee', 1, '2025-04-01', 'Clean and in good condition', 'Pass'),
(2, 'Noah Davis', 3, '2025-04-03', 'Window broken', 'Fail'),
(3, 'Emily Carter', 5, '2025-04-05', 'Dust on window sill', 'Pass'),
(4, 'James Lee', 6, '2025-04-06', 'Trash not taken out', 'Fail'),
(5, 'Sophia Martinez', 9, '2025-04-07', 'Tidy and organized', 'Pass'),
(6, 'Liam Johnson', 11, '2025-04-08', 'Unpleasant odor detected', 'Fail'),
(7, 'Olivia Nguyen', 13, '2025-04-09', 'All in good condition', 'Pass'),
(8, 'Noah Davis', 14, '2025-04-10', 'Broken desk lamp', 'Fail'),
(9, 'Emma Patel', 16, '2025-04-11', 'Clean and neat', 'Pass'),
(10, 'William Kim', 18, '2025-04-12', 'Minor wall scratches', 'Pass'),
(11, 'Sophia Martinez', 10, '2025-04-13', 'Room unoccupied', 'Pass'),
(12, 'Emily Carter', 2, '2025-04-14', 'Food left out overnight', 'Fail'),
(13, 'James Lee', 7, '2025-04-15', 'Clean but floor needs mopping', 'Pass'),
(14, 'Noah Davis', 15, '2025-04-15', 'Light bulb out', 'Fail'),
(15, 'Emily Carter', 6, '2025-04-16', 'Very clean, well-kept', 'Pass'),
(16, 'Olivia Nguyen', 14, '2025-04-16', 'Messy desk and open food', 'Fail'),
(17, 'Liam Johnson', 12, '2025-04-17', 'No issues found', 'Pass'),
(18, 'Emma Patel', 17, '2025-04-17', 'Slight clutter, no violations', 'Pass'),
(19, 'William Kim', 18, '2025-04-18', 'Garbage not taken out', 'Fail'),
(20, 'Sophia Martinez', 11, '2025-04-18', 'Clothes on floor, but otherwise okay', 'Pass'),
(21, 'Noah Davis', 13, '2025-04-19', 'Broken chair leg reported', 'Fail'),
(22, 'James Lee', 2, '2025-04-20', 'Fan not working, maintenance needed', 'Fail');

-- DORM EVENTS
INSERT INTO dorm_event (event_id, dorm_id, title, description, date) VALUES (1, 1, 'Game Night', 'Board games and pizza in the lounge', '2025-04-20');
INSERT INTO dorm_event (event_id, dorm_id, title, description, date) VALUES (2, 2, 'Study Session', 'Quiet hours study with snacks', '2025-04-21');
INSERT INTO dorm_event (event_id, dorm_id, title, description, date) VALUES (3, 3, 'Movie Night', 'Outdoor movie screening with popcorn', '2025-04-22');
INSERT INTO dorm_event (event_id, dorm_id, title, description, date) VALUES (4, 1, 'Wellness Workshop', 'Stress relief tips and free yoga class', '2025-04-24');
INSERT INTO dorm_event (event_id, dorm_id, title, description, date) VALUES (5, 2, 'Ice Cream Social', 'Meet your neighbors with ice cream treats', '2025-04-26');
INSERT INTO dorm_event (event_id, dorm_id, title, description, date) VALUES (6, 3, 'Open Mic Night', 'Poetry, music, and comedy in the lounge', '2025-04-28');
INSERT INTO dorm_event (event_id, dorm_id, title, description, date) VALUES (7, 1, 'Resume Workshop', 'Career Center session on resume building', '2025-05-01');
INSERT INTO dorm_event (event_id, dorm_id, title, description, date) VALUES (8, 2, 'Trivia Night', 'Teams compete for prizes and bragging rights', '2025-05-03');
INSERT INTO dorm_event (event_id, dorm_id, title, description, date) VALUES (9, 3, 'Game Tournament', 'Smash Bros and Mario Kart competition', '2025-05-05');
INSERT INTO dorm_event (event_id, dorm_id, title, description, date) VALUES (10, 1, 'Floor Decorating Contest', 'Decorate your hallway for a prize', '2025-05-07');

-- ROOM CHANGE HISTORY
INSERT INTO room_change_history (change_id, student_id, old_room_id, new_room_id, change_date) VALUES (1, 1, 1, 2, '2025-03-01');
INSERT INTO room_change_history (change_id, student_id, old_room_id, new_room_id, change_date) VALUES (2, 2, 2, 3, '2025-03-15');
INSERT INTO room_change_history (change_id, student_id, old_room_id, new_room_id, change_date) VALUES (3, 2, 3, 2, '2025-04-01');

-- MAINTENANCE REQUEST LOG
INSERT INTO maintenance_request_log (log_id, request_id, resolved_by, resolution_date) VALUES (1, 2, 'James Lee', '2025-04-13');